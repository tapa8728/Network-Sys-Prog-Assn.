//the  client tcp code
#include <sys/types.h>
#include <sys/socket.h>

#include <sys/errno.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#include <stdarg.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>


int main(int argc, char *argv[])
{
	struct sockaddr_in tcp_myaddr; 			/*TCP : address details about client*/
	struct sockaddr_in tcp_serveraddr; 		/*TCP : address details of the CC*/
	struct hostent  *phe;  					/* pointer to host information entry    */
	int TCPsock; 							//stores TCP socket file descriptor	
	int userInputsess;						//session menu switch case
	int sess_user_choice;					//session menu do-while loop
	char *host = "127.0.0.1";		
	char *SESSION_PORT="1234";		//will get from chat-coordinator..not hardcoded
	char s_name[7];				//stores session name
	char buf[100];
		
	/*create and bind a TCP socket*/
	//**step1 1: Create A TCP socket 
	TCPsock = createTCPSock(host, SESSION_PORT);
	printf("\n TCP socket value is : %d", TCPsock);
	
	//**step 2: Bind the TCP socket. No need for TCP client
	
	//**Step 3: set the values for endpoint(cc) address
	memset((char *)&tcp_serveraddr, 0, sizeof(tcp_serveraddr));
	tcp_serveraddr.sin_family = AF_INET;
	//Map host name to IP address, allowing for dotted decimal
	if ( phe = gethostbyname(host) )
			memcpy(&tcp_serveraddr.sin_addr, phe->h_addr, phe->h_length);
	else if ( (tcp_serveraddr.sin_addr.s_addr = inet_addr(host)) == INADDR_NONE )
			printf("can't get \"%s\" host entry\n", host);
	//Map port number (char string) to port number (int)
	if ((tcp_serveraddr.sin_port=htons((unsigned short)atoi(SESSION_PORT))) == 0)
			printf("\ncan't get \"%s\" port number\n", SESSION_PORT);
	else
		printf("\nPort number was successfully set ");
				
	//**step 4: connect
	if(connect(TCPsock, (struct sockaddr *)&tcp_serveraddr, sizeof(tcp_serveraddr)) < 0)
		printf("\n TCP Socket could not be connected");	/*end of TCP code*/
	else
	{	
		printf("\nTCP connection successful !");
		do
		{
			printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			printf("\n~~~~~~~~~~~~~~~~~~# SESSION NAME : \"%s\" #~~~~~~~~~~~~~~~~", s_name);
			printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			printf("\nSelect one of the following options -");
			printf("\n1. Submit message to \"%s\" ", s_name);
			printf("\n2. Get Next message in \"%s\" ", s_name);
			printf("\n3. Get All messages in \"%s\" ", s_name);
			printf("\n4. Leave session \"%s\" ", s_name);
			printf("\nEnter a valid option from the menu : ");
			scanf("%d", &userInputsess);
			switch(userInputsess)
			{
				/***********************************************************************************************************/
				case 1: //submit a message
						printf("\n Inside Submit message to \"%s\" ", s_name);
						// step 1 : send "1" to session server
						sprintf(buf, "%d", 1);
						if((send(TCPsock, buf, strlen(buf), 0))<0)
							printf("\n MEssage - %s - was not sent", buf);
						else
							printf("\n MEssage - %s - was sent !! YAY", buf);
						break;
				/***********************************************************************************************************/
				case 2: //get next message
						printf("\n Inside Get Next message in \"%s\" ", s_name);
						sprintf(buf, "%d", 2);
						if((send(TCPsock, buf, strlen(buf), 0))<0)
							printf("\n MEssage - %s - was not sent", buf);
						else
							printf("\n MEssage - %s - was sent !! YAY", buf);
						break;
				/***********************************************************************************************************/
				case 3: //get all messages
						printf("\n Get All messages in \"%s\" ", s_name);
						sprintf(buf, "%d", 3);
						if((send(TCPsock, buf, strlen(buf), 0))<0)
							printf("\n MEssage - %s - was not sent", buf);
						else
							printf("\n MEssage - %s - was sent !! YAY", buf);
						break;		
				/***********************************************************************************************************/
				case 4: //leave session
						printf("\n Leave session \"%s\" ", s_name);
						sprintf(buf, "%d", 4);
						if((send(TCPsock, buf, strlen(buf), 0))<0)
							printf("\n MEssage - %s - was not sent", buf);
						else
							printf("\n MEssage - %s - was sent !! YAY", buf);
						break;
				/***********************************************************************************************************/
				default: //incorrect input
						printf("\n You have entered an incorrect option! Try again !!");
						exit(1);
						close(TCPsock);
						break;
			}//end of switch
			printf("\nDo you want to continue with session *%s*? Enter 1 to continue : ", s_name);
			scanf("%d", &sess_user_choice);
			printf("\nThe user chose:%d", sess_user_choice);
		}while(sess_user_choice == 1);
	}
}//end of main

//function implementations
/****************************************************************************************************************** 
 *	This function is used to create TCP socket on the client side 
	parameters :
		host - address of CC
		port - Port of cc
	Goal : Create own UDP socket and connect to CC UDP socket
 ******************************************************************************************************************/
int createTCPSock(const char *host, const char *portnum)
{
	printf("\nInside createTCPSock");
	int tcpsock;
	tcpsock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (tcpsock < 0)
	{
		printf("Socket cannot be created");
	}
       return tcpsock;
}